// This file was automatically generated by VS extension Windows Machine Learning Code Generator v3
// from model file export_model.onnx
// Warning: This file may get overwritten if you add add an onnx file with the same name
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Windows.Media;
using Windows.Storage;
using Windows.Storage.Streams;
using Windows.AI.MachineLearning;
namespace OnnxOnXamarin.UWP
{
    
    public sealed class export_modelInput
    {
        public TensorInt64Bit int64_input; // shape(1,6)
    }
    
    public sealed class export_modelOutput
    {
        public TensorInt64Bit output_label; // shape(1)
        public IList<IDictionary<long,float>> output_probability;
    }
    
    public sealed class export_modelModel
    {
        private LearningModel model;
        private LearningModelSession session;
        private LearningModelBinding binding;
        public static async Task<export_modelModel> CreateFromStreamAsync(IRandomAccessStreamReference stream)
        {
            export_modelModel learningModel = new export_modelModel();
            learningModel.model = await LearningModel.LoadFromStreamAsync(stream);
            learningModel.session = new LearningModelSession(learningModel.model);
            learningModel.binding = new LearningModelBinding(learningModel.session);
            return learningModel;
        }
        public async Task<export_modelOutput> EvaluateAsync(export_modelInput input)
        {
            binding.Bind("int64_input", input.int64_input);
            var result = await session.EvaluateAsync(binding, "0");
            var output = new export_modelOutput();
            output.output_label = result.Outputs["output_label"] as TensorInt64Bit;
            output.output_probability = result.Outputs["output_probability"] as IList<IDictionary<long,float>>;
            return output;
        }
    }
}

